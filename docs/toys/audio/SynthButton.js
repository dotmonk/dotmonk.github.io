import'../../node_modules/core-js/modules/es.object.assign.js';import React from'../../node_modules/react/index.js';import Button from'../../node_modules/react-nyx-components/lib/Button.js';import'../../node_modules/react-nyx-components/lib/Input.js';import'../../node_modules/react-nyx-components/lib/Select.js';import'../../node_modules/react-nyx-components/lib/Textarea.js';import'../../node_modules/react-nyx-components/lib/Panel.js';import'../../node_modules/react-nyx-components/lib/Label.js';import'../../node_modules/react-nyx-components/lib/Link.js';import'../../node_modules/react-nyx-components/lib/Loading.js';import'../../node_modules/react-nyx-components/lib/Checkbox.js';import'../../node_modules/react-nyx-components/lib/Radiobutton.js';import'../../node_modules/react-dom/index.js';import'../../node_modules/core-js/modules/es.array.iterator.js';import'../../node_modules/core-js/modules/web.dom-collections.iterator.js';class SynthButton extends React.Component{constructor(props){super(props),this.state={pressed:!1},this.gainNode=props.audioContext.createGain(),this.gainNode.connect(props.audioContext.destination),this.gainNode.gain.setTargetAtTime(1e-6,props.audioContext.currentTime,.06),this.oscillatorNode=props.audioContext.createOscillator(),this.oscillatorNode.connect(this.gainNode),this.oscillatorNode.type=props.waveform,this.oscillatorNode.frequency.value=props.frequency,this.oscillatorNode.start(),this.onKeyDown=this.onKeyDown.bind(this),this.onKeyUp=this.onKeyUp.bind(this);}componentWillReceiveProps(newProps){newProps.waveform!==this.props.waveform&&(this.gainNode.disconnect(),this.oscillatorNode.disconnect(),this.oscillatorNode.stop(),this.gainNode=newProps.audioContext.createGain(),this.gainNode.connect(newProps.audioContext.destination),this.gainNode.gain.setTargetAtTime(1e-6,newProps.audioContext.currentTime,.06),this.oscillatorNode=newProps.audioContext.createOscillator(),this.oscillatorNode.connect(this.gainNode),this.oscillatorNode.type=newProps.waveform,this.oscillatorNode.frequency.value=newProps.frequency,this.oscillatorNode.start());}onKeyDown(keyEvent){const eventKey=keyEvent.key,{synthKey,audioContext}=this.props;eventKey===synthKey&&(this.gainNode.gain.setTargetAtTime(1,audioContext.currentTime,.06),this.setState({pressed:!0}));}onKeyUp(keyEvent){const eventKey=keyEvent.key,{synthKey,audioContext}=this.props;eventKey===synthKey&&(this.gainNode.gain.setTargetAtTime(1e-6,audioContext.currentTime,.06),this.setState({pressed:!1}));}componentDidMount(){window.addEventListener("keydown",this.onKeyDown),window.addEventListener("keyup",this.onKeyUp);}componentWillUnmount(){window.removeEventListener("keydown",this.onKeyDown),window.removeEventListener("keyup",this.onKeyUp);}render(){const{label,synthKey,raised}=this.props,{pressed}=this.state,raisedStyle=raised?{height:"60px",paddingTop:"33px",verticalAlign:"top",marginRight:"-13px",marginLeft:"-7px",zIndex:2}:{},style=Object.assign({borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomLeftRadius:"3px",borderBottomRightRadius:"3px",fontSize:"8px",width:"20px",padding:"3px",height:"90px",paddingTop:"60px",marginRight:"-3px",position:"relative"},raisedStyle);return React.createElement(Button,{style:style,color:raised?"bright":void 0,active:pressed,onMouseDown:()=>{window.dispatchEvent(new KeyboardEvent("keydown",{key:synthKey}));},onMouseUp:()=>{window.dispatchEvent(new KeyboardEvent("keyup",{key:synthKey}));}},label,React.createElement("br",null),synthKey)}}export default SynthButton;